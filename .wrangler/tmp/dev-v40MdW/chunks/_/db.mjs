import{Buffer as e}from"node:buffer";const t=Symbol.for("drizzle:entityKind");function is(e,i){if(!e||"object"!=typeof e)return!1;if(e instanceof i)return!0;if(!Object.prototype.hasOwnProperty.call(i,t))throw new Error(`Class "${i.name??"<unknown>"}" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`);let s=Object.getPrototypeOf(e).constructor;if(s)for(;s;){if(t in s&&s[t]===i[t])return!0;s=Object.getPrototypeOf(s)}return!1}class ConsoleLogWriter{static[t]="ConsoleLogWriter";write(e){console.log(e)}}class DefaultLogger{static[t]="DefaultLogger";writer;constructor(e){this.writer=e?.writer??new ConsoleLogWriter}logQuery(e,t){const i=t.map(e=>{try{return JSON.stringify(e)}catch{return String(e)}}),s=i.length?` -- params: [${i.join(", ")}]`:"";this.writer.write(`Query: ${e}${s}`)}}class NoopLogger{static[t]="NoopLogger";logQuery(){}}const i=Symbol.for("drizzle:Name"),s=Symbol.for("drizzle:Schema"),r=Symbol.for("drizzle:Columns"),n=Symbol.for("drizzle:ExtraConfigColumns"),a=Symbol.for("drizzle:OriginalName"),l=Symbol.for("drizzle:BaseName"),o=Symbol.for("drizzle:IsAlias"),u=Symbol.for("drizzle:ExtraConfigBuilder"),c=Symbol.for("drizzle:IsDrizzleTable");class Table{static[t]="Table";static Symbol={Name:i,Schema:s,OriginalName:a,Columns:r,ExtraConfigColumns:n,BaseName:l,IsAlias:o,ExtraConfigBuilder:u};[i];[a];[s];[r];[n];[l];[o]=!1;[c]=!0;[u]=void 0;constructor(e,t,r){this[i]=this[a]=e,this[s]=t,this[l]=r}}function getTableName(e){return e[i]}function getTableUniqueName(e){return`${e[s]??"public"}.${e[i]}`}class Column{constructor(e,t){this.table=e,this.config=t,this.name=t.name,this.keyAsName=t.keyAsName,this.notNull=t.notNull,this.default=t.default,this.defaultFn=t.defaultFn,this.onUpdateFn=t.onUpdateFn,this.hasDefault=t.hasDefault,this.primary=t.primaryKey,this.isUnique=t.isUnique,this.uniqueName=t.uniqueName,this.uniqueType=t.uniqueType,this.dataType=t.dataType,this.columnType=t.columnType,this.generated=t.generated,this.generatedIdentity=t.generatedIdentity}static[t]="Column";name;keyAsName;primary;notNull;default;defaultFn;onUpdateFn;hasDefault;isUnique;uniqueName;uniqueType;dataType;columnType;enumValues=void 0;generated=void 0;generatedIdentity=void 0;config;mapFromDriverValue(e){return e}mapToDriverValue(e){return e}shouldDisableInsert(){return void 0!==this.config.generated&&"byDefault"!==this.config.generated.type}}class ColumnBuilder{static[t]="ColumnBuilder";config;constructor(e,t,i){this.config={name:e,keyAsName:""===e,notNull:!1,default:void 0,hasDefault:!1,primaryKey:!1,isUnique:!1,uniqueName:void 0,uniqueType:void 0,dataType:t,columnType:i,generated:void 0}}$type(){return this}notNull(){return this.config.notNull=!0,this}default(e){return this.config.default=e,this.config.hasDefault=!0,this}$defaultFn(e){return this.config.defaultFn=e,this.config.hasDefault=!0,this}$default=this.$defaultFn;$onUpdateFn(e){return this.config.onUpdateFn=e,this.config.hasDefault=!0,this}$onUpdate=this.$onUpdateFn;primaryKey(){return this.config.primaryKey=!0,this.config.notNull=!0,this}setName(e){""===this.config.name&&(this.config.name=e)}}const h=Symbol.for("drizzle:isPgEnum");class Subquery{static[t]="Subquery";constructor(e,t,i,s=!1,r=[]){this._={brand:"Subquery",sql:e,selectedFields:t,alias:i,isWith:s,usedTables:r}}}class WithSubquery extends Subquery{static[t]="WithSubquery"}const d={startActiveSpan:(e,t)=>t()},m=Symbol.for("drizzle:ViewBaseConfig");function isSQLWrapper(e){return null!=e&&"function"==typeof e.getSQL}class StringChunk{static[t]="StringChunk";value;constructor(e){this.value=Array.isArray(e)?e:[e]}getSQL(){return new SQL([this])}}class SQL{constructor(e){this.queryChunks=e;for(const t of e)if(is(t,Table)){const e=t[Table.Symbol.Schema];this.usedTables.push(void 0===e?t[Table.Symbol.Name]:e+"."+t[Table.Symbol.Name])}}static[t]="SQL";decoder=f;shouldInlineParams=!1;usedTables=[];append(e){return this.queryChunks.push(...e.queryChunks),this}toQuery(e){return d.startActiveSpan("drizzle.buildSQL",t=>{const i=this.buildQueryFromSourceParams(this.queryChunks,e);return t?.setAttributes({"drizzle.query.text":i.sql,"drizzle.query.params":JSON.stringify(i.params)}),i})}buildQueryFromSourceParams(e,t){const i=Object.assign({},t,{inlineParams:t.inlineParams||this.shouldInlineParams,paramStartIndex:t.paramStartIndex||{value:0}}),{casing:s,escapeName:r,escapeParam:n,prepareTyping:a,inlineParams:l,paramStartIndex:u}=i;return function(e){const t={sql:"",params:[]};for(const i of e)t.sql+=i.sql,t.params.push(...i.params),i.typings?.length&&(t.typings||(t.typings=[]),t.typings.push(...i.typings));return t}(e.map(e=>{if(is(e,StringChunk))return{sql:e.value.join(""),params:[]};if(is(e,Name))return{sql:r(e.value),params:[]};if(void 0===e)return{sql:"",params:[]};if(Array.isArray(e)){const t=[new StringChunk("(")];for(const[i,s]of e.entries())t.push(s),i<e.length-1&&t.push(new StringChunk(", "));return t.push(new StringChunk(")")),this.buildQueryFromSourceParams(t,i)}if(is(e,SQL))return this.buildQueryFromSourceParams(e.queryChunks,{...i,inlineParams:l||e.shouldInlineParams});if(is(e,Table)){const t=e[Table.Symbol.Schema],i=e[Table.Symbol.Name];return{sql:void 0===t||e[o]?r(i):r(t)+"."+r(i),params:[]}}if(is(e,Column)){const i=s.getColumnCasing(e);if("indexes"===t.invokeSource)return{sql:r(i),params:[]};const n=e.table[Table.Symbol.Schema];return{sql:e.table[o]||void 0===n?r(e.table[Table.Symbol.Name])+"."+r(i):r(n)+"."+r(e.table[Table.Symbol.Name])+"."+r(i),params:[]}}if(is(e,View)){const t=e[m].schema,i=e[m].name;return{sql:void 0===t||e[m].isAlias?r(i):r(t)+"."+r(i),params:[]}}if(is(e,Param)){if(is(e.value,Placeholder))return{sql:n(u.value++,e),params:[e],typings:["none"]};const t=null===e.value?null:e.encoder.mapToDriverValue(e.value);if(is(t,SQL))return this.buildQueryFromSourceParams([t],i);if(l)return{sql:this.mapInlineParam(t,i),params:[]};let s=["none"];return a&&(s=[a(e.encoder)]),{sql:n(u.value++,t),params:[t],typings:s}}return is(e,Placeholder)?{sql:n(u.value++,e),params:[e],typings:["none"]}:is(e,SQL.Aliased)&&void 0!==e.fieldAlias?{sql:r(e.fieldAlias),params:[]}:is(e,Subquery)?e._.isWith?{sql:r(e._.alias),params:[]}:this.buildQueryFromSourceParams([new StringChunk("("),e._.sql,new StringChunk(") "),new Name(e._.alias)],i):(c=e)&&"function"==typeof c&&h in c&&!0===c[h]?e.schema?{sql:r(e.schema)+"."+r(e.enumName),params:[]}:{sql:r(e.enumName),params:[]}:isSQLWrapper(e)?e.shouldOmitSQLParens?.()?this.buildQueryFromSourceParams([e.getSQL()],i):this.buildQueryFromSourceParams([new StringChunk("("),e.getSQL(),new StringChunk(")")],i):l?{sql:this.mapInlineParam(e,i),params:[]}:{sql:n(u.value++,e),params:[e],typings:["none"]};var c}))}mapInlineParam(e,{escapeString:t}){if(null===e)return"null";if("number"==typeof e||"boolean"==typeof e)return e.toString();if("string"==typeof e)return t(e);if("object"==typeof e){const i=e.toString();return t("[object Object]"===i?JSON.stringify(e):i)}throw new Error("Unexpected param value: "+e)}getSQL(){return this}as(e){return void 0===e?this:new SQL.Aliased(this,e)}mapWith(e){return this.decoder="function"==typeof e?{mapFromDriverValue:e}:e,this}inlineParams(){return this.shouldInlineParams=!0,this}if(e){return e?this:void 0}}class Name{constructor(e){this.value=e}static[t]="Name";brand;getSQL(){return new SQL([this])}}const f={mapFromDriverValue:e=>e},p={mapToDriverValue:e=>e};class Param{constructor(e,t=p){this.value=e,this.encoder=t}static[t]="Param";brand;getSQL(){return new SQL([this])}}function sql(e,...t){const i=[];(t.length>0||e.length>0&&""!==e[0])&&i.push(new StringChunk(e[0]));for(const[s,r]of t.entries())i.push(r,new StringChunk(e[s+1]));return new SQL(i)}var g;(g=sql||(sql={})).empty=function(){return new SQL([])},g.fromList=function(e){return new SQL(e)},g.raw=function(e){return new SQL([new StringChunk(e)])},g.join=function(e,t){const i=[];for(const[s,r]of e.entries())s>0&&void 0!==t&&i.push(t),i.push(r);return new SQL(i)},g.identifier=function(e){return new Name(e)},g.placeholder=function(e){return new Placeholder(e)},g.param=function(e,t){return new Param(e,t)},(e=>{class Aliased{constructor(e,t){this.sql=e,this.fieldAlias=t}static[t]="SQL.Aliased";isSelectionField=!1;getSQL(){return this.sql}clone(){return new Aliased(this.sql,this.fieldAlias)}}e.Aliased=Aliased})(SQL||(SQL={}));class Placeholder{constructor(e){this.name=e}static[t]="Placeholder";getSQL(){return new SQL([this])}}function fillPlaceholders(e,t){return e.map(e=>{if(is(e,Placeholder)){if(!(e.name in t))throw new Error(`No value for placeholder "${e.name}" was provided`);return t[e.name]}if(is(e,Param)&&is(e.value,Placeholder)){if(!(e.value.name in t))throw new Error(`No value for placeholder "${e.value.name}" was provided`);return e.encoder.mapToDriverValue(t[e.value.name])}return e})}const y=Symbol.for("drizzle:IsDrizzleView");class View{static[t]="View";[m];[y]=!0;constructor({name:e,schema:t,selectedFields:i,query:s}){this[m]={name:e,originalName:e,schema:t,selectedFields:i,query:s,isExisting:!s,isAlias:!1}}getSQL(){return new SQL([this])}}function mapResultRow(e,t,i){const s={},r=e.reduce((e,{path:r,field:n},a)=>{let l;l=is(n,Column)?n:is(n,SQL)?n.decoder:n.sql.decoder;let o=e;for(const[e,u]of r.entries())if(e<r.length-1)u in o||(o[u]={}),o=o[u];else{const e=t[a],c=o[u]=null===e?null:l.mapFromDriverValue(e);if(i&&is(n,Column)&&2===r.length){const e=r[0];e in s?"string"==typeof s[e]&&s[e]!==getTableName(n.table)&&(s[e]=!1):s[e]=null===c&&getTableName(n.table)}}return e},{});if(i&&Object.keys(s).length>0)for(const[e,t]of Object.entries(s))"string"!=typeof t||i[t]||(r[e]=null);return r}function orderSelectedFields(e,t){return Object.entries(e).reduce((e,[i,s])=>{if("string"!=typeof i)return e;const r=t?[...t,i]:[i];return is(s,Column)||is(s,SQL)||is(s,SQL.Aliased)?e.push({path:r,field:s}):is(s,Table)?e.push(...orderSelectedFields(s[Table.Symbol.Columns],r)):e.push(...orderSelectedFields(s,r)),e},[])}function haveSameKeys(e,t){const i=Object.keys(e),s=Object.keys(t);if(i.length!==s.length)return!1;for(const[e,t]of i.entries())if(t!==s[e])return!1;return!0}function mapUpdateSet(e,t){const i=Object.entries(t).filter(([,e])=>void 0!==e).map(([t,i])=>is(i,SQL)||is(i,Column)?[t,i]:[t,new Param(i,e[Table.Symbol.Columns][t])]);if(0===i.length)throw new Error("No values to set");return Object.fromEntries(i)}function getTableLikeName(e){return is(e,Subquery)?e._.alias:is(e,View)?e[m].name:is(e,SQL)?void 0:e[Table.Symbol.IsAlias]?e[Table.Symbol.Name]:e[Table.Symbol.BaseName]}function getColumnNameAndConfig(e,t){return{name:"string"==typeof e&&e.length>0?e:"",config:"object"==typeof e?e:t}}Column.prototype.getSQL=function(){return new SQL([this])},Table.prototype.getSQL=function(){return new SQL([this])},Subquery.prototype.getSQL=function(){return new SQL([this])};const b="undefined"==typeof TextDecoder?null:new TextDecoder,S=Symbol.for("drizzle:PgInlineForeignKeys"),Q=Symbol.for("drizzle:EnableRLS");class PgTable extends Table{static[t]="PgTable";static Symbol=Object.assign({},Table.Symbol,{InlineForeignKeys:S,EnableRLS:Q});[S]=[];[Q]=!1;[Table.Symbol.ExtraConfigBuilder]=void 0;[Table.Symbol.ExtraConfigColumns]={}}class PrimaryKeyBuilder{static[t]="PgPrimaryKeyBuilder";columns;name;constructor(e,t){this.columns=e,this.name=t}build(e){return new PrimaryKey(e,this.columns,this.name)}}class PrimaryKey{constructor(e,t,i){this.table=e,this.columns=t,this.name=i}static[t]="PgPrimaryKey";columns;name;getName(){return this.name??`${this.table[PgTable.Symbol.Name]}_${this.columns.map(e=>e.name).join("_")}_pk`}}function bindIfParam(e,t){return!function(e){return"object"==typeof e&&null!==e&&"mapToDriverValue"in e&&"function"==typeof e.mapToDriverValue}(t)||isSQLWrapper(e)||is(e,Param)||is(e,Placeholder)||is(e,Column)||is(e,Table)||is(e,View)?e:new Param(e,t)}const eq=(e,t)=>sql`${e} = ${bindIfParam(t,e)}`,ne=(e,t)=>sql`${e} <> ${bindIfParam(t,e)}`;function and(...e){const t=e.filter(e=>void 0!==e);if(0!==t.length)return 1===t.length?new SQL(t):new SQL([new StringChunk("("),sql.join(t,new StringChunk(" and ")),new StringChunk(")")])}function or(...e){const t=e.filter(e=>void 0!==e);if(0!==t.length)return 1===t.length?new SQL(t):new SQL([new StringChunk("("),sql.join(t,new StringChunk(" or ")),new StringChunk(")")])}function not(e){return sql`not ${e}`}const gt=(e,t)=>sql`${e} > ${bindIfParam(t,e)}`,gte=(e,t)=>sql`${e} >= ${bindIfParam(t,e)}`,lt=(e,t)=>sql`${e} < ${bindIfParam(t,e)}`,lte=(e,t)=>sql`${e} <= ${bindIfParam(t,e)}`;function inArray(e,t){return Array.isArray(t)?0===t.length?sql`false`:sql`${e} in ${t.map(t=>bindIfParam(t,e))}`:sql`${e} in ${bindIfParam(t,e)}`}function notInArray(e,t){return Array.isArray(t)?0===t.length?sql`true`:sql`${e} not in ${t.map(t=>bindIfParam(t,e))}`:sql`${e} not in ${bindIfParam(t,e)}`}function isNull(e){return sql`${e} is null`}function isNotNull(e){return sql`${e} is not null`}function exists(e){return sql`exists ${e}`}function notExists(e){return sql`not exists ${e}`}function between(e,t,i){return sql`${e} between ${bindIfParam(t,e)} and ${bindIfParam(i,e)}`}function notBetween(e,t,i){return sql`${e} not between ${bindIfParam(t,e)} and ${bindIfParam(i,e)}`}function like(e,t){return sql`${e} like ${t}`}function notLike(e,t){return sql`${e} not like ${t}`}function ilike(e,t){return sql`${e} ilike ${t}`}function notIlike(e,t){return sql`${e} not ilike ${t}`}function asc(e){return sql`${e} asc`}function desc(e){return sql`${e} desc`}class Relation{constructor(e,t,i){this.sourceTable=e,this.referencedTable=t,this.relationName=i,this.referencedTableName=t[Table.Symbol.Name]}static[t]="Relation";referencedTableName;fieldName}class Relations{constructor(e,t){this.table=e,this.config=t}static[t]="Relations"}class One extends Relation{constructor(e,t,i,s){super(e,t,i?.relationName),this.config=i,this.isNullable=s}static[t]="One";withFieldName(e){const t=new One(this.sourceTable,this.referencedTable,this.config,this.isNullable);return t.fieldName=e,t}}class Many extends Relation{constructor(e,t,i){super(e,t,i?.relationName),this.config=i}static[t]="Many";withFieldName(e){const t=new Many(this.sourceTable,this.referencedTable,this.config);return t.fieldName=e,t}}function createOne(e){return function(t,i){return new One(e,t,i,i?.fields.reduce((e,t)=>e&&t.notNull,!0)??!1)}}function createMany(e){return function(t,i){return new Many(e,t,i)}}function normalizeRelation(e,t,i){if(is(i,One)&&i.config)return{fields:i.config.fields,references:i.config.references};const s=t[getTableUniqueName(i.referencedTable)];if(!s)throw new Error(`Table "${i.referencedTable[Table.Symbol.Name]}" not found in schema`);const r=e[s];if(!r)throw new Error(`Table "${s}" not found in schema`);const n=i.sourceTable,a=t[getTableUniqueName(n)];if(!a)throw new Error(`Table "${n[Table.Symbol.Name]}" not found in schema`);const l=[];for(const e of Object.values(r.relations))(i.relationName&&i!==e&&e.relationName===i.relationName||!i.relationName&&e.referencedTable===i.sourceTable)&&l.push(e);if(l.length>1)throw i.relationName?new Error(`There are multiple relations with name "${i.relationName}" in table "${s}"`):new Error(`There are multiple relations between "${s}" and "${i.sourceTable[Table.Symbol.Name]}". Please specify relation name`);if(l[0]&&is(l[0],One)&&l[0].config)return{fields:l[0].config.references,references:l[0].config.fields};throw new Error(`There is not enough information to infer relation "${a}.${i.fieldName}"`)}function createTableRelationsHelpers(e){return{one:createOne(e),many:createMany(e)}}function mapRelationalRow(e,t,i,s,r=e=>e){const n={};for(const[a,l]of s.entries())if(l.isJson){const s=t.relations[l.tsKey],o=i[a],u="string"==typeof o?JSON.parse(o):o;n[l.tsKey]=is(s,One)?u&&mapRelationalRow(e,e[l.relationTableTsKey],u,l.selection,r):u.map(t=>mapRelationalRow(e,e[l.relationTableTsKey],t,l.selection,r))}else{const e=r(i[a]),t=l.field;let s;s=is(t,Column)?t:is(t,SQL)?t.decoder:t.sql.decoder,n[l.tsKey]=null===e?null:s.mapFromDriverValue(e)}return n}class ColumnAliasProxyHandler{constructor(e){this.table=e}static[t]="ColumnAliasProxyHandler";get(e,t){return"table"===t?this.table:e[t]}}class TableAliasProxyHandler{constructor(e,t){this.alias=e,this.replaceOriginalName=t}static[t]="TableAliasProxyHandler";get(e,t){if(t===Table.Symbol.IsAlias)return!0;if(t===Table.Symbol.Name)return this.alias;if(this.replaceOriginalName&&t===Table.Symbol.OriginalName)return this.alias;if(t===m)return{...e[m],name:this.alias,isAlias:!0};if(t===Table.Symbol.Columns){const t=e[Table.Symbol.Columns];if(!t)return t;const i={};return Object.keys(t).map(s=>{i[s]=new Proxy(t[s],new ColumnAliasProxyHandler(new Proxy(e,this)))}),i}const i=e[t];return is(i,Column)?new Proxy(i,new ColumnAliasProxyHandler(new Proxy(e,this))):i}}function aliasedTable(e,t){return new Proxy(e,new TableAliasProxyHandler(t,!1))}function aliasedTableColumn(e,t){return new Proxy(e,new ColumnAliasProxyHandler(new Proxy(e.table,new TableAliasProxyHandler(t,!1))))}function mapColumnsInAliasedSQLToAlias(e,t){return new SQL.Aliased(mapColumnsInSQLToAlias(e.sql,t),e.fieldAlias)}function mapColumnsInSQLToAlias(e,t){return sql.join(e.queryChunks.map(e=>is(e,Column)?aliasedTableColumn(e,t):is(e,SQL)?mapColumnsInSQLToAlias(e,t):is(e,SQL.Aliased)?mapColumnsInAliasedSQLToAlias(e,t):e))}class SelectionProxyHandler{static[t]="SelectionProxyHandler";config;constructor(e){this.config={...e}}get(e,t){if("_"===t)return{...e._,selectedFields:new Proxy(e._.selectedFields,this)};if(t===m)return{...e[m],selectedFields:new Proxy(e[m].selectedFields,this)};if("symbol"==typeof t)return e[t];const i=(is(e,Subquery)?e._.selectedFields:is(e,View)?e[m].selectedFields:e)[t];if(is(i,SQL.Aliased)){if("sql"===this.config.sqlAliasedBehavior&&!i.isSelectionField)return i.sql;const e=i.clone();return e.isSelectionField=!0,e}if(is(i,SQL)){if("sql"===this.config.sqlBehavior)return i;throw new Error(`You tried to reference "${t}" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using ".as('alias')" method.`)}return is(i,Column)?this.config.alias?new Proxy(i,new ColumnAliasProxyHandler(new Proxy(i.table,new TableAliasProxyHandler(this.config.alias,this.config.replaceOriginalName??!1)))):i:"object"!=typeof i||null===i?i:new Proxy(i,new SelectionProxyHandler(this.config))}}class QueryPromise{static[t]="QueryPromise";[Symbol.toStringTag]="QueryPromise";catch(e){return this.then(void 0,e)}finally(e){return this.then(t=>(e?.(),t),t=>{throw e?.(),t})}then(e,t){return this.execute().then(e,t)}}class ForeignKeyBuilder{static[t]="SQLiteForeignKeyBuilder";reference;_onUpdate;_onDelete;constructor(e,t){this.reference=()=>{const{name:t,columns:i,foreignColumns:s}=e();return{name:t,columns:i,foreignTable:s[0].table,foreignColumns:s}},t&&(this._onUpdate=t.onUpdate,this._onDelete=t.onDelete)}onUpdate(e){return this._onUpdate=e,this}onDelete(e){return this._onDelete=e,this}build(e){return new ForeignKey(e,this)}}class ForeignKey{constructor(e,t){this.table=e,this.reference=t.reference,this.onUpdate=t._onUpdate,this.onDelete=t._onDelete}static[t]="SQLiteForeignKey";reference;onUpdate;onDelete;getName(){const{name:e,columns:t,foreignColumns:s}=this.reference(),r=t.map(e=>e.name),n=s.map(e=>e.name),a=[this.table[i],...r,s[0].table[i],...n];return e??`${a.join("_")}_fk`}}class SQLiteColumnBuilder extends ColumnBuilder{static[t]="SQLiteColumnBuilder";foreignKeyConfigs=[];references(e,t={}){return this.foreignKeyConfigs.push({ref:e,actions:t}),this}unique(e){return this.config.isUnique=!0,this.config.uniqueName=e,this}generatedAlwaysAs(e,t){return this.config.generated={as:e,type:"always",mode:t?.mode??"virtual"},this}buildForeignKeys(e,t){return this.foreignKeyConfigs.map(({ref:i,actions:s})=>((i,s)=>{const r=new ForeignKeyBuilder(()=>{const t=i();return{columns:[e],foreignColumns:[t]}});return s.onUpdate&&r.onUpdate(s.onUpdate),s.onDelete&&r.onDelete(s.onDelete),r.build(t)})(i,s))}}class SQLiteColumn extends Column{constructor(e,t){t.uniqueName||(t.uniqueName=function(e,t){return`${e[i]}_${t.join("_")}_unique`}(e,[t.name])),super(e,t),this.table=e}static[t]="SQLiteColumn"}class SQLiteBigIntBuilder extends SQLiteColumnBuilder{static[t]="SQLiteBigIntBuilder";constructor(e){super(e,"bigint","SQLiteBigInt")}build(e){return new SQLiteBigInt(e,this.config)}}class SQLiteBigInt extends SQLiteColumn{static[t]="SQLiteBigInt";getSQLType(){return"blob"}mapFromDriverValue(t){if(void 0!==e&&e.from){const i=e.isBuffer(t)?t:t instanceof ArrayBuffer?e.from(t):t.buffer?e.from(t.buffer,t.byteOffset,t.byteLength):e.from(t);return BigInt(i.toString("utf8"))}return BigInt(b.decode(t))}mapToDriverValue(t){return e.from(t.toString())}}class SQLiteBlobJsonBuilder extends SQLiteColumnBuilder{static[t]="SQLiteBlobJsonBuilder";constructor(e){super(e,"json","SQLiteBlobJson")}build(e){return new SQLiteBlobJson(e,this.config)}}class SQLiteBlobJson extends SQLiteColumn{static[t]="SQLiteBlobJson";getSQLType(){return"blob"}mapFromDriverValue(t){if(void 0!==e&&e.from){const i=e.isBuffer(t)?t:t instanceof ArrayBuffer?e.from(t):t.buffer?e.from(t.buffer,t.byteOffset,t.byteLength):e.from(t);return JSON.parse(i.toString("utf8"))}return JSON.parse(b.decode(t))}mapToDriverValue(t){return e.from(JSON.stringify(t))}}class SQLiteBlobBufferBuilder extends SQLiteColumnBuilder{static[t]="SQLiteBlobBufferBuilder";constructor(e){super(e,"buffer","SQLiteBlobBuffer")}build(e){return new SQLiteBlobBuffer(e,this.config)}}class SQLiteBlobBuffer extends SQLiteColumn{static[t]="SQLiteBlobBuffer";mapFromDriverValue(t){return e.isBuffer(t)?t:e.from(t)}getSQLType(){return"blob"}}function blob(e,t){const{name:i,config:s}=getColumnNameAndConfig(e,t);return"json"===s?.mode?new SQLiteBlobJsonBuilder(i):"bigint"===s?.mode?new SQLiteBigIntBuilder(i):new SQLiteBlobBufferBuilder(i)}class SQLiteCustomColumnBuilder extends SQLiteColumnBuilder{static[t]="SQLiteCustomColumnBuilder";constructor(e,t,i){super(e,"custom","SQLiteCustomColumn"),this.config.fieldConfig=t,this.config.customTypeParams=i}build(e){return new SQLiteCustomColumn(e,this.config)}}class SQLiteCustomColumn extends SQLiteColumn{static[t]="SQLiteCustomColumn";sqlName;mapTo;mapFrom;constructor(e,t){super(e,t),this.sqlName=t.customTypeParams.dataType(t.fieldConfig),this.mapTo=t.customTypeParams.toDriver,this.mapFrom=t.customTypeParams.fromDriver}getSQLType(){return this.sqlName}mapFromDriverValue(e){return"function"==typeof this.mapFrom?this.mapFrom(e):e}mapToDriverValue(e){return"function"==typeof this.mapTo?this.mapTo(e):e}}function customType(e){return(t,i)=>{const{name:s,config:r}=getColumnNameAndConfig(t,i);return new SQLiteCustomColumnBuilder(s,r,e)}}class SQLiteBaseIntegerBuilder extends SQLiteColumnBuilder{static[t]="SQLiteBaseIntegerBuilder";constructor(e,t,i){super(e,t,i),this.config.autoIncrement=!1}primaryKey(e){return e?.autoIncrement&&(this.config.autoIncrement=!0),this.config.hasDefault=!0,super.primaryKey()}}class SQLiteBaseInteger extends SQLiteColumn{static[t]="SQLiteBaseInteger";autoIncrement=this.config.autoIncrement;getSQLType(){return"integer"}}class SQLiteIntegerBuilder extends SQLiteBaseIntegerBuilder{static[t]="SQLiteIntegerBuilder";constructor(e){super(e,"number","SQLiteInteger")}build(e){return new SQLiteInteger(e,this.config)}}class SQLiteInteger extends SQLiteBaseInteger{static[t]="SQLiteInteger"}class SQLiteTimestampBuilder extends SQLiteBaseIntegerBuilder{static[t]="SQLiteTimestampBuilder";constructor(e,t){super(e,"date","SQLiteTimestamp"),this.config.mode=t}defaultNow(){return this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`)}build(e){return new SQLiteTimestamp(e,this.config)}}class SQLiteTimestamp extends SQLiteBaseInteger{static[t]="SQLiteTimestamp";mode=this.config.mode;mapFromDriverValue(e){return"timestamp"===this.config.mode?new Date(1e3*e):new Date(e)}mapToDriverValue(e){const t=e.getTime();return"timestamp"===this.config.mode?Math.floor(t/1e3):t}}class SQLiteBooleanBuilder extends SQLiteBaseIntegerBuilder{static[t]="SQLiteBooleanBuilder";constructor(e,t){super(e,"boolean","SQLiteBoolean"),this.config.mode=t}build(e){return new SQLiteBoolean(e,this.config)}}class SQLiteBoolean extends SQLiteBaseInteger{static[t]="SQLiteBoolean";mode=this.config.mode;mapFromDriverValue(e){return 1===Number(e)}mapToDriverValue(e){return e?1:0}}function integer(e,t){const{name:i,config:s}=getColumnNameAndConfig(e,t);return"timestamp"===s?.mode||"timestamp_ms"===s?.mode?new SQLiteTimestampBuilder(i,s.mode):"boolean"===s?.mode?new SQLiteBooleanBuilder(i,s.mode):new SQLiteIntegerBuilder(i)}class SQLiteNumericBuilder extends SQLiteColumnBuilder{static[t]="SQLiteNumericBuilder";constructor(e){super(e,"string","SQLiteNumeric")}build(e){return new SQLiteNumeric(e,this.config)}}class SQLiteNumeric extends SQLiteColumn{static[t]="SQLiteNumeric";mapFromDriverValue(e){return"string"==typeof e?e:String(e)}getSQLType(){return"numeric"}}class SQLiteNumericNumberBuilder extends SQLiteColumnBuilder{static[t]="SQLiteNumericNumberBuilder";constructor(e){super(e,"number","SQLiteNumericNumber")}build(e){return new SQLiteNumericNumber(e,this.config)}}class SQLiteNumericNumber extends SQLiteColumn{static[t]="SQLiteNumericNumber";mapFromDriverValue(e){return"number"==typeof e?e:Number(e)}mapToDriverValue=String;getSQLType(){return"numeric"}}class SQLiteNumericBigIntBuilder extends SQLiteColumnBuilder{static[t]="SQLiteNumericBigIntBuilder";constructor(e){super(e,"bigint","SQLiteNumericBigInt")}build(e){return new SQLiteNumericBigInt(e,this.config)}}class SQLiteNumericBigInt extends SQLiteColumn{static[t]="SQLiteNumericBigInt";mapFromDriverValue=BigInt;mapToDriverValue=String;getSQLType(){return"numeric"}}function numeric(e,t){const{name:i,config:s}=getColumnNameAndConfig(e,t),r=s?.mode;return"number"===r?new SQLiteNumericNumberBuilder(i):"bigint"===r?new SQLiteNumericBigIntBuilder(i):new SQLiteNumericBuilder(i)}class SQLiteRealBuilder extends SQLiteColumnBuilder{static[t]="SQLiteRealBuilder";constructor(e){super(e,"number","SQLiteReal")}build(e){return new SQLiteReal(e,this.config)}}class SQLiteReal extends SQLiteColumn{static[t]="SQLiteReal";getSQLType(){return"real"}}function real(e){return new SQLiteRealBuilder(e??"")}class SQLiteTextBuilder extends SQLiteColumnBuilder{static[t]="SQLiteTextBuilder";constructor(e,t){super(e,"string","SQLiteText"),this.config.enumValues=t.enum,this.config.length=t.length}build(e){return new SQLiteText(e,this.config)}}class SQLiteText extends SQLiteColumn{static[t]="SQLiteText";enumValues=this.config.enumValues;length=this.config.length;constructor(e,t){super(e,t)}getSQLType(){return"text"+(this.config.length?`(${this.config.length})`:"")}}class SQLiteTextJsonBuilder extends SQLiteColumnBuilder{static[t]="SQLiteTextJsonBuilder";constructor(e){super(e,"json","SQLiteTextJson")}build(e){return new SQLiteTextJson(e,this.config)}}class SQLiteTextJson extends SQLiteColumn{static[t]="SQLiteTextJson";getSQLType(){return"text"}mapFromDriverValue(e){return JSON.parse(e)}mapToDriverValue(e){return JSON.stringify(e)}}function text(e,t={}){const{name:i,config:s}=getColumnNameAndConfig(e,t);return"json"===s.mode?new SQLiteTextJsonBuilder(i):new SQLiteTextBuilder(i,s)}const w=Symbol.for("drizzle:SQLiteInlineForeignKeys");class SQLiteTable extends Table{static[t]="SQLiteTable";static Symbol=Object.assign({},Table.Symbol,{InlineForeignKeys:w});[Table.Symbol.Columns];[w]=[];[Table.Symbol.ExtraConfigBuilder]=void 0}function sqliteTableBase(e,t,i,s,r=e){const n=new SQLiteTable(e,s,r),a="function"==typeof t?t({blob:blob,customType:customType,integer:integer,numeric:numeric,real:real,text:text}):t,l=Object.fromEntries(Object.entries(a).map(([e,t])=>{const i=t;i.setName(e);const s=i.build(n);return n[w].push(...i.buildForeignKeys(s,n)),[e,s]})),o=Object.assign(n,l);return o[Table.Symbol.Columns]=l,o[Table.Symbol.ExtraConfigColumns]=l,o}const sqliteTable=(e,t,i)=>sqliteTableBase(e,t);function extractUsedTable(e){return is(e,SQLiteTable)?[`${e[Table.Symbol.BaseName]}`]:is(e,Subquery)?e._.usedTables??[]:is(e,SQL)?e.usedTables??[]:[]}class SQLiteDeleteBase extends QueryPromise{constructor(e,t,i,s){super(),this.table=e,this.session=t,this.dialect=i,this.config={table:e,withList:s}}static[t]="SQLiteDelete";config;where(e){return this.config.where=e,this}orderBy(...e){if("function"==typeof e[0]){const t=e[0](new Proxy(this.config.table[Table.Symbol.Columns],new SelectionProxyHandler({sqlAliasedBehavior:"alias",sqlBehavior:"sql"}))),i=Array.isArray(t)?t:[t];this.config.orderBy=i}else{const t=e;this.config.orderBy=t}return this}limit(e){return this.config.limit=e,this}returning(e=this.table[SQLiteTable.Symbol.Columns]){return this.config.returning=orderSelectedFields(e),this}getSQL(){return this.dialect.buildDeleteQuery(this.config)}toSQL(){const{typings:e,...t}=this.dialect.sqlToQuery(this.getSQL());return t}_prepare(e=!0){return this.session[e?"prepareOneTimeQuery":"prepareQuery"](this.dialect.sqlToQuery(this.getSQL()),this.config.returning,this.config.returning?"all":"run",!0,void 0,{type:"delete",tables:extractUsedTable(this.config.table)})}prepare(){return this._prepare(!1)}run=e=>this._prepare().run(e);all=e=>this._prepare().all(e);get=e=>this._prepare().get(e);values=e=>this._prepare().values(e);async execute(e){return this._prepare().execute(e)}$dynamic(){return this}}function toSnakeCase(e){return(e.replace(/['\u2019]/g,"").match(/[\da-z]+|[A-Z]+(?![a-z])|[A-Z][\da-z]+/g)??[]).map(e=>e.toLowerCase()).join("_")}function toCamelCase(e){return(e.replace(/['\u2019]/g,"").match(/[\da-z]+|[A-Z]+(?![a-z])|[A-Z][\da-z]+/g)??[]).reduce((e,t,i)=>e+(0===i?t.toLowerCase():`${t[0].toUpperCase()}${t.slice(1)}`),"")}function noopCase(e){return e}class CasingCache{static[t]="CasingCache";cache={};cachedTables={};convert;constructor(e){this.convert="snake_case"===e?toSnakeCase:"camelCase"===e?toCamelCase:noopCase}getColumnCasing(e){if(!e.keyAsName)return e.name;const t=`${e.table[Table.Symbol.Schema]??"public"}.${e.table[Table.Symbol.OriginalName]}.${e.name}`;return this.cache[t]||this.cacheTable(e.table),this.cache[t]}cacheTable(e){const t=`${e[Table.Symbol.Schema]??"public"}.${e[Table.Symbol.OriginalName]}`;if(!this.cachedTables[t]){for(const i of Object.values(e[Table.Symbol.Columns])){const e=`${t}.${i.name}`;this.cache[e]=this.convert(i.name)}this.cachedTables[t]=!0}}clearCache(){this.cache={},this.cachedTables={}}}class DrizzleError extends Error{static[t]="DrizzleError";constructor({message:e,cause:t}){super(e),this.name="DrizzleError",this.cause=t}}class DrizzleQueryError extends Error{constructor(e,t,i){super(`Failed query: ${e}\nparams: ${t}`),this.query=e,this.params=t,this.cause=i,Error.captureStackTrace(this,DrizzleQueryError),i&&(this.cause=i)}}class TransactionRollbackError extends DrizzleError{static[t]="TransactionRollbackError";constructor(){super({message:"Rollback"})}}class SQLiteViewBase extends View{static[t]="SQLiteViewBase"}class SQLiteDialect{static[t]="SQLiteDialect";casing;constructor(e){this.casing=new CasingCache(e?.casing)}escapeName(e){return`"${e}"`}escapeParam(e){return"?"}escapeString(e){return`'${e.replace(/'/g,"''")}'`}buildWithCTE(e){if(!e?.length)return;const t=[sql`with `];for(const[i,s]of e.entries())t.push(sql`${sql.identifier(s._.alias)} as (${s._.sql})`),i<e.length-1&&t.push(sql`, `);return t.push(sql` `),sql.join(t)}buildDeleteQuery({table:e,where:t,returning:i,withList:s,limit:r,orderBy:n}){return sql`${this.buildWithCTE(s)}delete from ${e}${t?sql` where ${t}`:void 0}${i?sql` returning ${this.buildSelection(i,{isSingleTable:!0})}`:void 0}${this.buildOrderBy(n)}${this.buildLimit(r)}`}buildUpdateSet(e,t){const i=e[Table.Symbol.Columns],s=Object.keys(i).filter(e=>void 0!==t[e]||void 0!==i[e]?.onUpdateFn),r=s.length;return sql.join(s.flatMap((e,s)=>{const n=i[e],a=t[e]??sql.param(n.onUpdateFn(),n),l=sql`${sql.identifier(this.casing.getColumnCasing(n))} = ${a}`;return s<r-1?[l,sql.raw(", ")]:[l]}))}buildUpdateQuery({table:e,set:t,where:i,returning:s,withList:r,joins:n,from:a,limit:l,orderBy:o}){const u=this.buildWithCTE(r),c=this.buildUpdateSet(e,t),h=a&&sql.join([sql.raw(" from "),this.buildFromTable(a)]);return sql`${u}update ${e} set ${c}${h}${this.buildJoins(n)}${i?sql` where ${i}`:void 0}${s?sql` returning ${this.buildSelection(s,{isSingleTable:!0})}`:void 0}${this.buildOrderBy(o)}${this.buildLimit(l)}`}buildSelection(e,{isSingleTable:t=!1}={}){const i=e.length,s=e.flatMap(({field:e},s)=>{const r=[];if(is(e,SQL.Aliased)&&e.isSelectionField)r.push(sql.identifier(e.fieldAlias));else if(is(e,SQL.Aliased)||is(e,SQL)){const i=is(e,SQL.Aliased)?e.sql:e;t?r.push(new SQL(i.queryChunks.map(e=>is(e,Column)?sql.identifier(this.casing.getColumnCasing(e)):e))):r.push(i),is(e,SQL.Aliased)&&r.push(sql` as ${sql.identifier(e.fieldAlias)}`)}else if(is(e,Column)){const i=e.table[Table.Symbol.Name];"SQLiteNumericBigInt"===e.columnType?t?r.push(sql`cast(${sql.identifier(this.casing.getColumnCasing(e))} as text)`):r.push(sql`cast(${sql.identifier(i)}.${sql.identifier(this.casing.getColumnCasing(e))} as text)`):t?r.push(sql.identifier(this.casing.getColumnCasing(e))):r.push(sql`${sql.identifier(i)}.${sql.identifier(this.casing.getColumnCasing(e))}`)}return s<i-1&&r.push(sql`, `),r});return sql.join(s)}buildJoins(e){if(!e||0===e.length)return;const t=[];if(e)for(const[i,s]of e.entries()){0===i&&t.push(sql` `);const r=s.table,n=s.on?sql` on ${s.on}`:void 0;if(is(r,SQLiteTable)){const e=r[SQLiteTable.Symbol.Name],i=r[SQLiteTable.Symbol.Schema],a=r[SQLiteTable.Symbol.OriginalName],l=e===a?void 0:s.alias;t.push(sql`${sql.raw(s.joinType)} join ${i?sql`${sql.identifier(i)}.`:void 0}${sql.identifier(a)}${l&&sql` ${sql.identifier(l)}`}${n}`)}else t.push(sql`${sql.raw(s.joinType)} join ${r}${n}`);i<e.length-1&&t.push(sql` `)}return sql.join(t)}buildLimit(e){return"object"==typeof e||"number"==typeof e&&e>=0?sql` limit ${e}`:void 0}buildOrderBy(e){const t=[];if(e)for(const[i,s]of e.entries())t.push(s),i<e.length-1&&t.push(sql`, `);return t.length>0?sql` order by ${sql.join(t)}`:void 0}buildFromTable(e){return is(e,Table)&&e[Table.Symbol.IsAlias]?sql`${sql`${sql.identifier(e[Table.Symbol.Schema]??"")}.`.if(e[Table.Symbol.Schema])}${sql.identifier(e[Table.Symbol.OriginalName])} ${sql.identifier(e[Table.Symbol.Name])}`:e}buildSelectQuery({withList:e,fields:t,fieldsFlat:i,where:s,having:r,table:n,joins:a,orderBy:l,groupBy:o,limit:u,offset:c,distinct:h,setOperators:d}){const f=i??orderSelectedFields(t);for(const e of f)if(is(e.field,Column)&&getTableName(e.field.table)!==(is(n,Subquery)?n._.alias:is(n,SQLiteViewBase)?n[m].name:is(n,SQL)?void 0:getTableName(n))&&!(e=>a?.some(({alias:t})=>t===(e[Table.Symbol.IsAlias]?getTableName(e):e[Table.Symbol.BaseName])))(e.field.table)){const t=getTableName(e.field.table);throw new Error(`Your "${e.path.join("->")}" field references a column "${t}"."${e.field.name}", but the table "${t}" is not part of the query! Did you forget to join it?`)}const p=!a||0===a.length,g=this.buildWithCTE(e),y=h?sql` distinct`:void 0,b=this.buildSelection(f,{isSingleTable:p}),S=this.buildFromTable(n),Q=this.buildJoins(a),w=s?sql` where ${s}`:void 0,L=r?sql` having ${r}`:void 0,q=[];if(o)for(const[e,t]of o.entries())q.push(t),e<o.length-1&&q.push(sql`, `);const T=q.length>0?sql` group by ${sql.join(q)}`:void 0,C=sql`${g}select${y} ${b} from ${S}${Q}${w}${T}${L}${this.buildOrderBy(l)}${this.buildLimit(u)}${c?sql` offset ${c}`:void 0}`;return d.length>0?this.buildSetOperations(C,d):C}buildSetOperations(e,t){const[i,...s]=t;if(!i)throw new Error("Cannot pass undefined values to any set operator");return 0===s.length?this.buildSetOperationQuery({leftSelect:e,setOperator:i}):this.buildSetOperations(this.buildSetOperationQuery({leftSelect:e,setOperator:i}),s)}buildSetOperationQuery({leftSelect:e,setOperator:{type:t,isAll:i,rightSelect:s,limit:r,orderBy:n,offset:a}}){const l=sql`${e.getSQL()} `,o=sql`${s.getSQL()}`;let u;if(n&&n.length>0){const e=[];for(const t of n)if(is(t,SQLiteColumn))e.push(sql.identifier(t.name));else if(is(t,SQL)){for(let e=0;e<t.queryChunks.length;e++){const i=t.queryChunks[e];is(i,SQLiteColumn)&&(t.queryChunks[e]=sql.identifier(this.casing.getColumnCasing(i)))}e.push(sql`${t}`)}else e.push(sql`${t}`);u=sql` order by ${sql.join(e,sql`, `)}`}const c="object"==typeof r||"number"==typeof r&&r>=0?sql` limit ${r}`:void 0,h=sql.raw(`${t} ${i?"all ":""}`);return sql`${l}${h}${o}${u}${c}${a?sql` offset ${a}`:void 0}`}buildInsertQuery({table:e,values:t,onConflict:i,returning:s,withList:r,select:n}){const a=[],l=e[Table.Symbol.Columns],o=Object.entries(l).filter(([e,t])=>!t.shouldDisableInsert()),u=o.map(([,e])=>sql.identifier(this.casing.getColumnCasing(e)));if(n){const e=t;is(e,SQL)?a.push(e):a.push(e.getSQL())}else{const e=t;a.push(sql.raw("values "));for(const[t,i]of e.entries()){const s=[];for(const[e,t]of o){const r=i[e];if(void 0===r||is(r,Param)&&void 0===r.value){let e;if(null!==t.default&&void 0!==t.default)e=is(t.default,SQL)?t.default:sql.param(t.default,t);else if(void 0!==t.defaultFn){const i=t.defaultFn();e=is(i,SQL)?i:sql.param(i,t)}else if(t.default||void 0===t.onUpdateFn)e=sql`null`;else{const i=t.onUpdateFn();e=is(i,SQL)?i:sql.param(i,t)}s.push(e)}else s.push(r)}a.push(s),t<e.length-1&&a.push(sql`, `)}}const c=this.buildWithCTE(r),h=sql.join(a),d=s?sql` returning ${this.buildSelection(s,{isSingleTable:!0})}`:void 0,m=i?.length?sql.join(i):void 0;return sql`${c}insert into ${e} ${u} ${h}${m}${d}`}sqlToQuery(e,t){return e.toQuery({casing:this.casing,escapeName:this.escapeName,escapeParam:this.escapeParam,escapeString:this.escapeString,invokeSource:t})}buildRelationalQuery({fullSchema:e,schema:t,tableNamesMap:i,table:s,tableConfig:r,queryConfig:n,tableAlias:a,nestedQueryRelation:l,joinOn:o}){let u,c,h,d=[],m=[];const f=[];if(!0===n){d=Object.entries(r.columns).map(([e,t])=>({dbKey:t.name,tsKey:e,field:aliasedTableColumn(t,a),relationTableTsKey:void 0,isJson:!1,selection:[]}))}else{const s=Object.fromEntries(Object.entries(r.columns).map(([e,t])=>[e,aliasedTableColumn(t,a)]));if(n.where){const e="function"==typeof n.where?n.where(s,{and:and,between:between,eq:eq,exists:exists,gt:gt,gte:gte,ilike:ilike,inArray:inArray,isNull:isNull,isNotNull:isNotNull,like:like,lt:lt,lte:lte,ne:ne,not:not,notBetween:notBetween,notExists:notExists,notLike:notLike,notIlike:notIlike,notInArray:notInArray,or:or,sql:sql}):n.where;h=e&&mapColumnsInSQLToAlias(e,a)}const l=[];let o=[];if(n.columns){let e=!1;for(const[t,i]of Object.entries(n.columns))void 0!==i&&t in r.columns&&(e||!0!==i||(e=!0),o.push(t));o.length>0&&(o=e?o.filter(e=>!0===n.columns?.[e]):Object.keys(r.columns).filter(e=>!o.includes(e)))}else o=Object.keys(r.columns);for(const e of o){const t=r.columns[e];l.push({tsKey:e,value:t})}let f,p=[];if(n.with&&(p=Object.entries(n.with).filter(e=>!!e[1]).map(([e,t])=>({tsKey:e,queryConfig:t,relation:r.relations[e]}))),n.extras){f="function"==typeof n.extras?n.extras(s,{sql:sql}):n.extras;for(const[e,t]of Object.entries(f))l.push({tsKey:e,value:mapColumnsInAliasedSQLToAlias(t,a)})}for(const{tsKey:e,value:t}of l)d.push({dbKey:is(t,SQL.Aliased)?t.fieldAlias:r.columns[e].name,tsKey:e,field:is(t,Column)?aliasedTableColumn(t,a):t,relationTableTsKey:void 0,isJson:!1,selection:[]});let g="function"==typeof n.orderBy?n.orderBy(s,{sql:sql,asc:asc,desc:desc}):n.orderBy??[];Array.isArray(g)||(g=[g]),m=g.map(e=>is(e,Column)?aliasedTableColumn(e,a):mapColumnsInSQLToAlias(e,a)),u=n.limit,c=n.offset;for(const{tsKey:s,queryConfig:r,relation:n}of p){const l=normalizeRelation(t,i,n),o=i[getTableUniqueName(n.referencedTable)],u=`${a}_${s}`,c=and(...l.fields.map((e,t)=>eq(aliasedTableColumn(l.references[t],u),aliasedTableColumn(e,a)))),h=this.buildRelationalQuery({fullSchema:e,schema:t,tableNamesMap:i,table:e[o],tableConfig:t[o],queryConfig:is(n,One)?!0===r?{limit:1}:{...r,limit:1}:r,tableAlias:u,joinOn:c,nestedQueryRelation:n}),m=sql`(${h.sql})`.as(s);d.push({dbKey:s,tsKey:s,field:m,relationTableTsKey:o,isJson:!0,selection:h.selection})}}if(0===d.length)throw new DrizzleError({message:`No fields selected for table "${r.tsName}" ("${a}"). You need to have at least one item in "columns", "with" or "extras". If you need to select all columns, omit the "columns" key or set it to undefined.`});let p;if(h=and(o,h),l){let e=sql`json_array(${sql.join(d.map(({field:e})=>is(e,SQLiteColumn)?sql.identifier(this.casing.getColumnCasing(e)):is(e,SQL.Aliased)?e.sql:e),sql`, `)})`;is(l,Many)&&(e=sql`coalesce(json_group_array(${e}), json_array())`);const t=[{dbKey:"data",tsKey:"data",field:e.as("data"),isJson:!0,relationTableTsKey:r.tsName,selection:d}];void 0!==u||void 0!==c||m.length>0?(p=this.buildSelectQuery({table:aliasedTable(s,a),fields:{},fieldsFlat:[{path:[],field:sql.raw("*")}],where:h,limit:u,offset:c,orderBy:m,setOperators:[]}),h=void 0,u=void 0,c=void 0,m=void 0):p=aliasedTable(s,a),p=this.buildSelectQuery({table:is(p,SQLiteTable)?p:new Subquery(p,{},a),fields:{},fieldsFlat:t.map(({field:e})=>({path:[],field:is(e,Column)?aliasedTableColumn(e,a):e})),joins:f,where:h,limit:u,offset:c,orderBy:m,setOperators:[]})}else p=this.buildSelectQuery({table:aliasedTable(s,a),fields:{},fieldsFlat:d.map(({field:e})=>({path:[],field:is(e,Column)?aliasedTableColumn(e,a):e})),joins:f,where:h,limit:u,offset:c,orderBy:m,setOperators:[]});return{tableTsKey:r.tsName,sql:p,selection:d}}}class SQLiteSyncDialect extends SQLiteDialect{static[t]="SQLiteSyncDialect";migrate(e,t,i){const s=void 0===i||"string"==typeof i?"__drizzle_migrations":i.migrationsTable??"__drizzle_migrations",r=sql`
			CREATE TABLE IF NOT EXISTS ${sql.identifier(s)} (
				id SERIAL PRIMARY KEY,
				hash text NOT NULL,
				created_at numeric
			)
		`;t.run(r);const n=t.values(sql`SELECT id, hash, created_at FROM ${sql.identifier(s)} ORDER BY created_at DESC LIMIT 1`)[0]??void 0;t.run(sql`BEGIN`);try{for(const i of e)if(!n||Number(n[2])<i.folderMillis){for(const e of i.sql)t.run(sql.raw(e));t.run(sql`INSERT INTO ${sql.identifier(s)} ("hash", "created_at") VALUES(${i.hash}, ${i.folderMillis})`)}t.run(sql`COMMIT`)}catch(e){throw t.run(sql`ROLLBACK`),e}}}class SQLiteAsyncDialect extends SQLiteDialect{static[t]="SQLiteAsyncDialect";async migrate(e,t,i){const s=void 0===i||"string"==typeof i?"__drizzle_migrations":i.migrationsTable??"__drizzle_migrations",r=sql`
			CREATE TABLE IF NOT EXISTS ${sql.identifier(s)} (
				id SERIAL PRIMARY KEY,
				hash text NOT NULL,
				created_at numeric
			)
		`;await t.run(r);const n=(await t.values(sql`SELECT id, hash, created_at FROM ${sql.identifier(s)} ORDER BY created_at DESC LIMIT 1`))[0]??void 0;await t.transaction(async t=>{for(const i of e)if(!n||Number(n[2])<i.folderMillis){for(const e of i.sql)await t.run(sql.raw(e));await t.run(sql`INSERT INTO ${sql.identifier(s)} ("hash", "created_at") VALUES(${i.hash}, ${i.folderMillis})`)}})}}class TypedQueryBuilder{static[t]="TypedQueryBuilder";getSelectedFields(){return this._.selectedFields}}class SQLiteSelectBuilder{static[t]="SQLiteSelectBuilder";fields;session;dialect;withList;distinct;constructor(e){this.fields=e.fields,this.session=e.session,this.dialect=e.dialect,this.withList=e.withList,this.distinct=e.distinct}from(e){const t=!!this.fields;let i;return i=this.fields?this.fields:is(e,Subquery)?Object.fromEntries(Object.keys(e._.selectedFields).map(t=>[t,e[t]])):is(e,SQLiteViewBase)?e[m].selectedFields:is(e,SQL)?{}:e[Table.Symbol.Columns],new SQLiteSelectBase({table:e,fields:i,isPartialSelect:t,session:this.session,dialect:this.dialect,withList:this.withList,distinct:this.distinct})}}class SQLiteSelectQueryBuilderBase extends TypedQueryBuilder{static[t]="SQLiteSelectQueryBuilder";_;config;joinsNotNullableMap;tableName;isPartialSelect;session;dialect;cacheConfig=void 0;usedTables=new Set;constructor({table:e,fields:t,isPartialSelect:i,session:s,dialect:r,withList:n,distinct:a}){super(),this.config={withList:n,table:e,fields:{...t},distinct:a,setOperators:[]},this.isPartialSelect=i,this.session=s,this.dialect=r,this._={selectedFields:t,config:this.config},this.tableName=getTableLikeName(e),this.joinsNotNullableMap="string"==typeof this.tableName?{[this.tableName]:!0}:{};for(const t of extractUsedTable(e))this.usedTables.add(t)}getUsedTables(){return[...this.usedTables]}createJoin(e){return(t,i)=>{const s=this.tableName,r=getTableLikeName(t);for(const e of extractUsedTable(t))this.usedTables.add(e);if("string"==typeof r&&this.config.joins?.some(e=>e.alias===r))throw new Error(`Alias "${r}" is already used in this query`);if(!this.isPartialSelect&&(1===Object.keys(this.joinsNotNullableMap).length&&"string"==typeof s&&(this.config.fields={[s]:this.config.fields}),"string"==typeof r&&!is(t,SQL))){const e=is(t,Subquery)?t._.selectedFields:is(t,View)?t[m].selectedFields:t[Table.Symbol.Columns];this.config.fields[r]=e}if("function"==typeof i&&(i=i(new Proxy(this.config.fields,new SelectionProxyHandler({sqlAliasedBehavior:"sql",sqlBehavior:"sql"})))),this.config.joins||(this.config.joins=[]),this.config.joins.push({on:i,table:t,joinType:e,alias:r}),"string"==typeof r)switch(e){case"left":this.joinsNotNullableMap[r]=!1;break;case"right":this.joinsNotNullableMap=Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([e])=>[e,!1])),this.joinsNotNullableMap[r]=!0;break;case"cross":case"inner":this.joinsNotNullableMap[r]=!0;break;case"full":this.joinsNotNullableMap=Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([e])=>[e,!1])),this.joinsNotNullableMap[r]=!1}return this}}leftJoin=this.createJoin("left");rightJoin=this.createJoin("right");innerJoin=this.createJoin("inner");fullJoin=this.createJoin("full");crossJoin=this.createJoin("cross");createSetOperator(e,t){return i=>{const s="function"==typeof i?i(getSQLiteSetOperators()):i;if(!haveSameKeys(this.getSelectedFields(),s.getSelectedFields()))throw new Error("Set operator error (union / intersect / except): selected fields are not the same or are in a different order");return this.config.setOperators.push({type:e,isAll:t,rightSelect:s}),this}}union=this.createSetOperator("union",!1);unionAll=this.createSetOperator("union",!0);intersect=this.createSetOperator("intersect",!1);except=this.createSetOperator("except",!1);addSetOperators(e){return this.config.setOperators.push(...e),this}where(e){return"function"==typeof e&&(e=e(new Proxy(this.config.fields,new SelectionProxyHandler({sqlAliasedBehavior:"sql",sqlBehavior:"sql"})))),this.config.where=e,this}having(e){return"function"==typeof e&&(e=e(new Proxy(this.config.fields,new SelectionProxyHandler({sqlAliasedBehavior:"sql",sqlBehavior:"sql"})))),this.config.having=e,this}groupBy(...e){if("function"==typeof e[0]){const t=e[0](new Proxy(this.config.fields,new SelectionProxyHandler({sqlAliasedBehavior:"alias",sqlBehavior:"sql"})));this.config.groupBy=Array.isArray(t)?t:[t]}else this.config.groupBy=e;return this}orderBy(...e){if("function"==typeof e[0]){const t=e[0](new Proxy(this.config.fields,new SelectionProxyHandler({sqlAliasedBehavior:"alias",sqlBehavior:"sql"}))),i=Array.isArray(t)?t:[t];this.config.setOperators.length>0?this.config.setOperators.at(-1).orderBy=i:this.config.orderBy=i}else{const t=e;this.config.setOperators.length>0?this.config.setOperators.at(-1).orderBy=t:this.config.orderBy=t}return this}limit(e){return this.config.setOperators.length>0?this.config.setOperators.at(-1).limit=e:this.config.limit=e,this}offset(e){return this.config.setOperators.length>0?this.config.setOperators.at(-1).offset=e:this.config.offset=e,this}getSQL(){return this.dialect.buildSelectQuery(this.config)}toSQL(){const{typings:e,...t}=this.dialect.sqlToQuery(this.getSQL());return t}as(e){const t=[];if(t.push(...extractUsedTable(this.config.table)),this.config.joins)for(const e of this.config.joins)t.push(...extractUsedTable(e.table));return new Proxy(new Subquery(this.getSQL(),this.config.fields,e,!1,[...new Set(t)]),new SelectionProxyHandler({alias:e,sqlAliasedBehavior:"alias",sqlBehavior:"error"}))}getSelectedFields(){return new Proxy(this.config.fields,new SelectionProxyHandler({alias:this.tableName,sqlAliasedBehavior:"alias",sqlBehavior:"error"}))}$dynamic(){return this}}class SQLiteSelectBase extends SQLiteSelectQueryBuilderBase{static[t]="SQLiteSelect";_prepare(e=!0){if(!this.session)throw new Error("Cannot execute a query on a query builder. Please use a database instance instead.");const t=orderSelectedFields(this.config.fields),i=this.session[e?"prepareOneTimeQuery":"prepareQuery"](this.dialect.sqlToQuery(this.getSQL()),t,"all",!0,void 0,{type:"select",tables:[...this.usedTables]},this.cacheConfig);return i.joinsNotNullableMap=this.joinsNotNullableMap,i}$withCache(e){return this.cacheConfig=void 0===e?{config:{},enable:!0,autoInvalidate:!0}:!1===e?{enable:!1}:{enable:!0,autoInvalidate:!0,...e},this}prepare(){return this._prepare(!1)}run=e=>this._prepare().run(e);all=e=>this._prepare().all(e);get=e=>this._prepare().get(e);values=e=>this._prepare().values(e);async execute(){return this.all()}}function createSetOperator(e,t){return(i,s,...r)=>{const n=[s,...r].map(i=>({type:e,isAll:t,rightSelect:i}));for(const e of n)if(!haveSameKeys(i.getSelectedFields(),e.rightSelect.getSelectedFields()))throw new Error("Set operator error (union / intersect / except): selected fields are not the same or are in a different order");return i.addSetOperators(n)}}!function(e,t){for(const i of t)for(const t of Object.getOwnPropertyNames(i.prototype))"constructor"!==t&&Object.defineProperty(e.prototype,t,Object.getOwnPropertyDescriptor(i.prototype,t)||Object.create(null))}(SQLiteSelectBase,[QueryPromise]);const getSQLiteSetOperators=()=>({union:L,unionAll:q,intersect:T,except:C}),L=createSetOperator("union",!1),q=createSetOperator("union",!0),T=createSetOperator("intersect",!1),C=createSetOperator("except",!1);class QueryBuilder{static[t]="SQLiteQueryBuilder";dialect;dialectConfig;constructor(e){this.dialect=is(e,SQLiteDialect)?e:void 0,this.dialectConfig=is(e,SQLiteDialect)?void 0:e}$with=(e,t)=>{const i=this;return{as:s=>("function"==typeof s&&(s=s(i)),new Proxy(new WithSubquery(s.getSQL(),t??("getSelectedFields"in s?s.getSelectedFields()??{}:{}),e,!0),new SelectionProxyHandler({alias:e,sqlAliasedBehavior:"alias",sqlBehavior:"error"})))}};with(...e){const t=this;return{select:function(i){return new SQLiteSelectBuilder({fields:i??void 0,session:void 0,dialect:t.getDialect(),withList:e})},selectDistinct:function(i){return new SQLiteSelectBuilder({fields:i??void 0,session:void 0,dialect:t.getDialect(),withList:e,distinct:!0})}}}select(e){return new SQLiteSelectBuilder({fields:e??void 0,session:void 0,dialect:this.getDialect()})}selectDistinct(e){return new SQLiteSelectBuilder({fields:e??void 0,session:void 0,dialect:this.getDialect(),distinct:!0})}getDialect(){return this.dialect||(this.dialect=new SQLiteSyncDialect(this.dialectConfig)),this.dialect}}class SQLiteInsertBuilder{constructor(e,t,i,s){this.table=e,this.session=t,this.dialect=i,this.withList=s}static[t]="SQLiteInsertBuilder";values(e){if(0===(e=Array.isArray(e)?e:[e]).length)throw new Error("values() must be called with at least one value");const t=e.map(e=>{const t={},i=this.table[Table.Symbol.Columns];for(const s of Object.keys(e)){const r=e[s];t[s]=is(r,SQL)?r:new Param(r,i[s])}return t});return new SQLiteInsertBase(this.table,t,this.session,this.dialect,this.withList)}select(e){const t="function"==typeof e?e(new QueryBuilder):e;if(!is(t,SQL)&&!haveSameKeys(this.table[r],t._.selectedFields))throw new Error("Insert select error: selected fields are not the same or are in a different order compared to the table definition");return new SQLiteInsertBase(this.table,t,this.session,this.dialect,this.withList,!0)}}class SQLiteInsertBase extends QueryPromise{constructor(e,t,i,s,r,n){super(),this.session=i,this.dialect=s,this.config={table:e,values:t,withList:r,select:n}}static[t]="SQLiteInsert";config;returning(e=this.config.table[SQLiteTable.Symbol.Columns]){return this.config.returning=orderSelectedFields(e),this}onConflictDoNothing(e={}){if(this.config.onConflict||(this.config.onConflict=[]),void 0===e.target)this.config.onConflict.push(sql` on conflict do nothing`);else{const t=Array.isArray(e.target)?sql`${e.target}`:sql`${[e.target]}`,i=e.where?sql` where ${e.where}`:sql``;this.config.onConflict.push(sql` on conflict ${t} do nothing${i}`)}return this}onConflictDoUpdate(e){if(e.where&&(e.targetWhere||e.setWhere))throw new Error('You cannot use both "where" and "targetWhere"/"setWhere" at the same time - "where" is deprecated, use "targetWhere" or "setWhere" instead.');this.config.onConflict||(this.config.onConflict=[]);const t=e.where?sql` where ${e.where}`:void 0,i=e.targetWhere?sql` where ${e.targetWhere}`:void 0,s=e.setWhere?sql` where ${e.setWhere}`:void 0,r=Array.isArray(e.target)?sql`${e.target}`:sql`${[e.target]}`,n=this.dialect.buildUpdateSet(this.config.table,mapUpdateSet(this.config.table,e.set));return this.config.onConflict.push(sql` on conflict ${r}${i} do update set ${n}${t}${s}`),this}getSQL(){return this.dialect.buildInsertQuery(this.config)}toSQL(){const{typings:e,...t}=this.dialect.sqlToQuery(this.getSQL());return t}_prepare(e=!0){return this.session[e?"prepareOneTimeQuery":"prepareQuery"](this.dialect.sqlToQuery(this.getSQL()),this.config.returning,this.config.returning?"all":"run",!0,void 0,{type:"insert",tables:extractUsedTable(this.config.table)})}prepare(){return this._prepare(!1)}run=e=>this._prepare().run(e);all=e=>this._prepare().all(e);get=e=>this._prepare().get(e);values=e=>this._prepare().values(e);async execute(){return this.config.returning?this.all():this.run()}$dynamic(){return this}}class SQLiteUpdateBuilder{constructor(e,t,i,s){this.table=e,this.session=t,this.dialect=i,this.withList=s}static[t]="SQLiteUpdateBuilder";set(e){return new SQLiteUpdateBase(this.table,mapUpdateSet(this.table,e),this.session,this.dialect,this.withList)}}class SQLiteUpdateBase extends QueryPromise{constructor(e,t,i,s,r){super(),this.session=i,this.dialect=s,this.config={set:t,table:e,withList:r,joins:[]}}static[t]="SQLiteUpdate";config;from(e){return this.config.from=e,this}createJoin(e){return(t,i)=>{const s=getTableLikeName(t);if("string"==typeof s&&this.config.joins.some(e=>e.alias===s))throw new Error(`Alias "${s}" is already used in this query`);if("function"==typeof i){const e=this.config.from?is(t,SQLiteTable)?t[Table.Symbol.Columns]:is(t,Subquery)?t._.selectedFields:is(t,SQLiteViewBase)?t[m].selectedFields:void 0:void 0;i=i(new Proxy(this.config.table[Table.Symbol.Columns],new SelectionProxyHandler({sqlAliasedBehavior:"sql",sqlBehavior:"sql"})),e&&new Proxy(e,new SelectionProxyHandler({sqlAliasedBehavior:"sql",sqlBehavior:"sql"})))}return this.config.joins.push({on:i,table:t,joinType:e,alias:s}),this}}leftJoin=this.createJoin("left");rightJoin=this.createJoin("right");innerJoin=this.createJoin("inner");fullJoin=this.createJoin("full");where(e){return this.config.where=e,this}orderBy(...e){if("function"==typeof e[0]){const t=e[0](new Proxy(this.config.table[Table.Symbol.Columns],new SelectionProxyHandler({sqlAliasedBehavior:"alias",sqlBehavior:"sql"}))),i=Array.isArray(t)?t:[t];this.config.orderBy=i}else{const t=e;this.config.orderBy=t}return this}limit(e){return this.config.limit=e,this}returning(e=this.config.table[SQLiteTable.Symbol.Columns]){return this.config.returning=orderSelectedFields(e),this}getSQL(){return this.dialect.buildUpdateQuery(this.config)}toSQL(){const{typings:e,...t}=this.dialect.sqlToQuery(this.getSQL());return t}_prepare(e=!0){return this.session[e?"prepareOneTimeQuery":"prepareQuery"](this.dialect.sqlToQuery(this.getSQL()),this.config.returning,this.config.returning?"all":"run",!0,void 0,{type:"insert",tables:extractUsedTable(this.config.table)})}prepare(){return this._prepare(!1)}run=e=>this._prepare().run(e);all=e=>this._prepare().all(e);get=e=>this._prepare().get(e);values=e=>this._prepare().values(e);async execute(){return this.config.returning?this.all():this.run()}$dynamic(){return this}}class SQLiteCountBuilder extends SQL{constructor(e){super(SQLiteCountBuilder.buildEmbeddedCount(e.source,e.filters).queryChunks),this.params=e,this.session=e.session,this.sql=SQLiteCountBuilder.buildCount(e.source,e.filters)}sql;static[t]="SQLiteCountBuilderAsync";[Symbol.toStringTag]="SQLiteCountBuilderAsync";session;static buildEmbeddedCount(e,t){return sql`(select count(*) from ${e}${sql.raw(" where ").if(t)}${t})`}static buildCount(e,t){return sql`select count(*) from ${e}${sql.raw(" where ").if(t)}${t}`}then(e,t){return Promise.resolve(this.session.count(this.sql)).then(e,t)}catch(e){return this.then(void 0,e)}finally(e){return this.then(t=>(e?.(),t),t=>{throw e?.(),t})}}class RelationalQueryBuilder{constructor(e,t,i,s,r,n,a,l){this.mode=e,this.fullSchema=t,this.schema=i,this.tableNamesMap=s,this.table=r,this.tableConfig=n,this.dialect=a,this.session=l}static[t]="SQLiteAsyncRelationalQueryBuilder";findMany(e){return"sync"===this.mode?new SQLiteSyncRelationalQuery(this.fullSchema,this.schema,this.tableNamesMap,this.table,this.tableConfig,this.dialect,this.session,e||{},"many"):new SQLiteRelationalQuery(this.fullSchema,this.schema,this.tableNamesMap,this.table,this.tableConfig,this.dialect,this.session,e||{},"many")}findFirst(e){return"sync"===this.mode?new SQLiteSyncRelationalQuery(this.fullSchema,this.schema,this.tableNamesMap,this.table,this.tableConfig,this.dialect,this.session,e?{...e,limit:1}:{limit:1},"first"):new SQLiteRelationalQuery(this.fullSchema,this.schema,this.tableNamesMap,this.table,this.tableConfig,this.dialect,this.session,e?{...e,limit:1}:{limit:1},"first")}}class SQLiteRelationalQuery extends QueryPromise{constructor(e,t,i,s,r,n,a,l,o){super(),this.fullSchema=e,this.schema=t,this.tableNamesMap=i,this.table=s,this.tableConfig=r,this.dialect=n,this.session=a,this.config=l,this.mode=o}static[t]="SQLiteAsyncRelationalQuery";mode;getSQL(){return this.dialect.buildRelationalQuery({fullSchema:this.fullSchema,schema:this.schema,tableNamesMap:this.tableNamesMap,table:this.table,tableConfig:this.tableConfig,queryConfig:this.config,tableAlias:this.tableConfig.tsName}).sql}_prepare(e=!1){const{query:t,builtQuery:i}=this._toSQL();return this.session[e?"prepareOneTimeQuery":"prepareQuery"](i,void 0,"first"===this.mode?"get":"all",!0,(e,i)=>{const s=e.map(e=>mapRelationalRow(this.schema,this.tableConfig,e,t.selection,i));return"first"===this.mode?s[0]:s})}prepare(){return this._prepare(!1)}_toSQL(){const e=this.dialect.buildRelationalQuery({fullSchema:this.fullSchema,schema:this.schema,tableNamesMap:this.tableNamesMap,table:this.table,tableConfig:this.tableConfig,queryConfig:this.config,tableAlias:this.tableConfig.tsName});return{query:e,builtQuery:this.dialect.sqlToQuery(e.sql)}}toSQL(){return this._toSQL().builtQuery}executeRaw(){return"first"===this.mode?this._prepare(!1).get():this._prepare(!1).all()}async execute(){return this.executeRaw()}}class SQLiteSyncRelationalQuery extends SQLiteRelationalQuery{static[t]="SQLiteSyncRelationalQuery";sync(){return this.executeRaw()}}class SQLiteRaw extends QueryPromise{constructor(e,t,i,s,r){super(),this.execute=e,this.getSQL=t,this.dialect=s,this.mapBatchResult=r,this.config={action:i}}static[t]="SQLiteRaw";config;getQuery(){return{...this.dialect.sqlToQuery(this.getSQL()),method:this.config.action}}mapResult(e,t){return t?this.mapBatchResult(e):e}_prepare(){return this}isResponseInArrayMode(){return!1}}class BaseSQLiteDatabase{constructor(e,t,i,s){this.resultKind=e,this.dialect=t,this.session=i,this._=s?{schema:s.schema,fullSchema:s.fullSchema,tableNamesMap:s.tableNamesMap}:{schema:void 0,fullSchema:{},tableNamesMap:{}},this.query={};const r=this.query;if(this._.schema)for(const[n,a]of Object.entries(this._.schema))r[n]=new RelationalQueryBuilder(e,s.fullSchema,this._.schema,this._.tableNamesMap,s.fullSchema[n],a,t,i);this.$cache={invalidate:async e=>{}}}static[t]="BaseSQLiteDatabase";query;$with=(e,t)=>{const i=this;return{as:s=>("function"==typeof s&&(s=s(new QueryBuilder(i.dialect))),new Proxy(new WithSubquery(s.getSQL(),t??("getSelectedFields"in s?s.getSelectedFields()??{}:{}),e,!0),new SelectionProxyHandler({alias:e,sqlAliasedBehavior:"alias",sqlBehavior:"error"})))}};$count(e,t){return new SQLiteCountBuilder({source:e,filters:t,session:this.session})}with(...e){const t=this;return{select:function(i){return new SQLiteSelectBuilder({fields:i??void 0,session:t.session,dialect:t.dialect,withList:e})},selectDistinct:function(i){return new SQLiteSelectBuilder({fields:i??void 0,session:t.session,dialect:t.dialect,withList:e,distinct:!0})},update:function(i){return new SQLiteUpdateBuilder(i,t.session,t.dialect,e)},insert:function(i){return new SQLiteInsertBuilder(i,t.session,t.dialect,e)},delete:function(i){return new SQLiteDeleteBase(i,t.session,t.dialect,e)}}}select(e){return new SQLiteSelectBuilder({fields:e??void 0,session:this.session,dialect:this.dialect})}selectDistinct(e){return new SQLiteSelectBuilder({fields:e??void 0,session:this.session,dialect:this.dialect,distinct:!0})}update(e){return new SQLiteUpdateBuilder(e,this.session,this.dialect)}$cache;insert(e){return new SQLiteInsertBuilder(e,this.session,this.dialect)}delete(e){return new SQLiteDeleteBase(e,this.session,this.dialect)}run(e){const t="string"==typeof e?sql.raw(e):e.getSQL();return"async"===this.resultKind?new SQLiteRaw(async()=>this.session.run(t),()=>t,"run",this.dialect,this.session.extractRawRunValueFromBatchResult.bind(this.session)):this.session.run(t)}all(e){const t="string"==typeof e?sql.raw(e):e.getSQL();return"async"===this.resultKind?new SQLiteRaw(async()=>this.session.all(t),()=>t,"all",this.dialect,this.session.extractRawAllValueFromBatchResult.bind(this.session)):this.session.all(t)}get(e){const t="string"==typeof e?sql.raw(e):e.getSQL();return"async"===this.resultKind?new SQLiteRaw(async()=>this.session.get(t),()=>t,"get",this.dialect,this.session.extractRawGetValueFromBatchResult.bind(this.session)):this.session.get(t)}values(e){const t="string"==typeof e?sql.raw(e):e.getSQL();return"async"===this.resultKind?new SQLiteRaw(async()=>this.session.values(t),()=>t,"values",this.dialect,this.session.extractRawValuesValueFromBatchResult.bind(this.session)):this.session.values(t)}transaction(e,t){return this.session.transaction(e,t)}}class Cache{static[t]="Cache"}class NoopCache extends Cache{strategy(){return"all"}static[t]="NoopCache";async get(e){}async put(e,t,i,s){}async onMutate(e){}}async function hashQuery(e,t){const i=`${e}-${JSON.stringify(t)}`,s=(new TextEncoder).encode(i),r=await crypto.subtle.digest("SHA-256",s);return[...new Uint8Array(r)].map(e=>e.toString(16).padStart(2,"0")).join("")}class ExecuteResultSync extends QueryPromise{constructor(e){super(),this.resultCb=e}static[t]="ExecuteResultSync";async execute(){return this.resultCb()}sync(){return this.resultCb()}}class SQLitePreparedQuery{constructor(e,t,i,s,r,n){this.mode=e,this.executeMethod=t,this.query=i,this.cache=s,this.queryMetadata=r,this.cacheConfig=n,s&&"all"===s.strategy()&&void 0===n&&(this.cacheConfig={enable:!0,autoInvalidate:!0}),this.cacheConfig?.enable||(this.cacheConfig=void 0)}static[t]="PreparedQuery";joinsNotNullableMap;async queryWithCache(e,t,i){if(void 0===this.cache||is(this.cache,NoopCache)||void 0===this.queryMetadata)try{return await i()}catch(i){throw new DrizzleQueryError(e,t,i)}if(this.cacheConfig&&!this.cacheConfig.enable)try{return await i()}catch(i){throw new DrizzleQueryError(e,t,i)}if(("insert"===this.queryMetadata.type||"update"===this.queryMetadata.type||"delete"===this.queryMetadata.type)&&this.queryMetadata.tables.length>0)try{const[e]=await Promise.all([i(),this.cache.onMutate({tables:this.queryMetadata.tables})]);return e}catch(i){throw new DrizzleQueryError(e,t,i)}if(!this.cacheConfig)try{return await i()}catch(i){throw new DrizzleQueryError(e,t,i)}if("select"===this.queryMetadata.type){const s=await this.cache.get(this.cacheConfig.tag??await hashQuery(e,t),this.queryMetadata.tables,void 0!==this.cacheConfig.tag,this.cacheConfig.autoInvalidate);if(void 0===s){let s;try{s=await i()}catch(i){throw new DrizzleQueryError(e,t,i)}return await this.cache.put(this.cacheConfig.tag??await hashQuery(e,t),s,this.cacheConfig.autoInvalidate?this.queryMetadata.tables:[],void 0!==this.cacheConfig.tag,this.cacheConfig.config),s}return s}try{return await i()}catch(i){throw new DrizzleQueryError(e,t,i)}}getQuery(){return this.query}mapRunResult(e,t){return e}mapAllResult(e,t){throw new Error("Not implemented")}mapGetResult(e,t){throw new Error("Not implemented")}execute(e){return"async"===this.mode?this[this.executeMethod](e):new ExecuteResultSync(()=>this[this.executeMethod](e))}mapResult(e,t){switch(this.executeMethod){case"run":return this.mapRunResult(e,t);case"all":return this.mapAllResult(e,t);case"get":return this.mapGetResult(e,t)}}}class SQLiteSession{constructor(e){this.dialect=e}static[t]="SQLiteSession";prepareOneTimeQuery(e,t,i,s,r,n,a){return this.prepareQuery(e,t,i,s,r,n,a)}run(e){const t=this.dialect.sqlToQuery(e);try{return this.prepareOneTimeQuery(t,void 0,"run",!1).run()}catch(e){throw new DrizzleError({cause:e,message:`Failed to run the query '${t.sql}'`})}}extractRawRunValueFromBatchResult(e){return e}all(e){return this.prepareOneTimeQuery(this.dialect.sqlToQuery(e),void 0,"run",!1).all()}extractRawAllValueFromBatchResult(e){throw new Error("Not implemented")}get(e){return this.prepareOneTimeQuery(this.dialect.sqlToQuery(e),void 0,"run",!1).get()}extractRawGetValueFromBatchResult(e){throw new Error("Not implemented")}values(e){return this.prepareOneTimeQuery(this.dialect.sqlToQuery(e),void 0,"run",!1).values()}async count(e){return(await this.values(e))[0][0]}extractRawValuesValueFromBatchResult(e){throw new Error("Not implemented")}}class SQLiteTransaction extends BaseSQLiteDatabase{constructor(e,t,i,s,r=0){super(e,t,i,s),this.schema=s,this.nestedIndex=r}static[t]="SQLiteTransaction";rollback(){throw new TransactionRollbackError}}class SQLiteD1Session extends SQLiteSession{constructor(e,t,i,s={}){super(t),this.client=e,this.schema=i,this.options=s,this.logger=s.logger??new NoopLogger,this.cache=s.cache??new NoopCache}static[t]="SQLiteD1Session";logger;cache;prepareQuery(e,t,i,s,r,n,a){const l=this.client.prepare(e.sql);return new D1PreparedQuery(l,e,this.logger,this.cache,n,a,t,i,s,r)}async batch(e){const t=[],i=[];for(const s of e){const e=s._prepare(),r=e.getQuery();if(t.push(e),r.params.length>0)i.push(e.stmt.bind(...r.params));else{const t=e.getQuery();i.push(this.client.prepare(t.sql).bind(...t.params))}}return(await this.client.batch(i)).map((e,i)=>t[i].mapResult(e,!0))}extractRawAllValueFromBatchResult(e){return e.results}extractRawGetValueFromBatchResult(e){return e.results[0]}extractRawValuesValueFromBatchResult(e){return d1ToRawMapping(e.results)}async transaction(e,t){const i=new D1Transaction("async",this.dialect,this,this.schema);await this.run(sql.raw("begin"+(t?.behavior?" "+t.behavior:"")));try{const t=await e(i);return await this.run(sql`commit`),t}catch(e){throw await this.run(sql`rollback`),e}}}class D1Transaction extends SQLiteTransaction{static[t]="D1Transaction";async transaction(e){const t=`sp${this.nestedIndex}`,i=new D1Transaction("async",this.dialect,this.session,this.schema,this.nestedIndex+1);await this.session.run(sql.raw(`savepoint ${t}`));try{const s=await e(i);return await this.session.run(sql.raw(`release savepoint ${t}`)),s}catch(e){throw await this.session.run(sql.raw(`rollback to savepoint ${t}`)),e}}}function d1ToRawMapping(e){const t=[];for(const i of e){const e=Object.keys(i).map(e=>i[e]);t.push(e)}return t}class D1PreparedQuery extends SQLitePreparedQuery{constructor(e,t,i,s,r,n,a,l,o,u){super("async",l,t,s,r,n),this.logger=i,this._isResponseInArrayMode=o,this.customResultMapper=u,this.fields=a,this.stmt=e}static[t]="D1PreparedQuery";customResultMapper;fields;stmt;async run(e){const t=fillPlaceholders(this.query.params,e??{});return this.logger.logQuery(this.query.sql,t),await this.queryWithCache(this.query.sql,t,async()=>this.stmt.bind(...t).run())}async all(e){const{fields:t,query:i,logger:s,stmt:r,customResultMapper:n}=this;if(!t&&!n){const t=fillPlaceholders(i.params,e??{});return s.logQuery(i.sql,t),await this.queryWithCache(i.sql,t,async()=>r.bind(...t).all().then(({results:e})=>this.mapAllResult(e)))}const a=await this.values(e);return this.mapAllResult(a)}mapAllResult(e,t){return t&&(e=d1ToRawMapping(e.results)),this.fields||this.customResultMapper?this.customResultMapper?this.customResultMapper(e):e.map(e=>mapResultRow(this.fields,e,this.joinsNotNullableMap)):e}async get(e){const{fields:t,joinsNotNullableMap:i,query:s,logger:r,stmt:n,customResultMapper:a}=this;if(!t&&!a){const t=fillPlaceholders(s.params,e??{});return r.logQuery(s.sql,t),await this.queryWithCache(s.sql,t,async()=>n.bind(...t).all().then(({results:e})=>e[0]))}const l=await this.values(e);if(l[0])return a?a(l):mapResultRow(t,l[0],i)}mapGetResult(e,t){return t&&(e=d1ToRawMapping(e.results)[0]),this.fields||this.customResultMapper?this.customResultMapper?this.customResultMapper([e]):mapResultRow(this.fields,e,this.joinsNotNullableMap):e}async values(e){const t=fillPlaceholders(this.query.params,e??{});return this.logger.logQuery(this.query.sql,t),await this.queryWithCache(this.query.sql,t,async()=>this.stmt.bind(...t).raw())}isResponseInArrayMode(){return this._isResponseInArrayMode}}class DrizzleD1Database extends BaseSQLiteDatabase{static[t]="D1Database";async batch(e){return this.session.batch(e)}}function drizzle(e,t={}){const i=new SQLiteAsyncDialect({casing:t.casing});let s,r;if(!0===t.logger?s=new DefaultLogger:!1!==t.logger&&(s=t.logger),t.schema){const e=function(e,t){1===Object.keys(e).length&&"default"in e&&!is(e.default,Table)&&(e=e.default);const i={},s={},r={};for(const[n,a]of Object.entries(e))if(is(a,Table)){const e=getTableUniqueName(a),t=s[e];i[e]=n,r[n]={tsName:n,dbName:a[Table.Symbol.Name],schema:a[Table.Symbol.Schema],columns:a[Table.Symbol.Columns],relations:t?.relations??{},primaryKey:t?.primaryKey??[]};for(const e of Object.values(a[Table.Symbol.Columns]))e.primary&&r[n].primaryKey.push(e);const l=a[Table.Symbol.ExtraConfigBuilder]?.(a[Table.Symbol.ExtraConfigColumns]);if(l)for(const e of Object.values(l))is(e,PrimaryKeyBuilder)&&r[n].primaryKey.push(...e.columns)}else if(is(a,Relations)){const e=getTableUniqueName(a.table),n=i[e],l=a.config(t(a.table));let o;for(const[t,i]of Object.entries(l))n?r[n].relations[t]=i:(e in s||(s[e]={relations:{},primaryKey:o}),s[e].relations[t]=i)}return{tables:r,tableNamesMap:i}}(t.schema,createTableRelationsHelpers);r={fullSchema:t.schema,schema:e.tables,tableNamesMap:e.tableNamesMap}}const n=new SQLiteD1Session(e,i,r,{logger:s,cache:t.cache}),a=new DrizzleD1Database("async",i,n,r);return a.$client=e,a.$cache=t.cache,a.$cache&&(a.$cache.invalidate=t.cache?.onMutate),a}const B=sqliteTable("users",{id:integer("id").primaryKey({autoIncrement:!0}),email:text("email").notNull().unique(),name:text("name").notNull(),avatar:text("avatar"),createdAt:integer("created_at",{mode:"timestamp"}).notNull().$defaultFn(()=>new Date),updatedAt:integer("updated_at",{mode:"timestamp"}).notNull().$defaultFn(()=>new Date)}),N=sqliteTable("posts",{id:integer("id").primaryKey({autoIncrement:!0}),title:text("title").notNull(),content:text("content").notNull(),excerpt:text("excerpt"),slug:text("slug").notNull().unique(),published:integer("published",{mode:"boolean"}).default(!1),authorId:integer("author_id").notNull().references(()=>B.id),createdAt:integer("created_at",{mode:"timestamp"}).notNull().$defaultFn(()=>new Date),updatedAt:integer("updated_at",{mode:"timestamp"}).notNull().$defaultFn(()=>new Date)}),v=sqliteTable("categories",{id:integer("id").primaryKey({autoIncrement:!0}),name:text("name").notNull().unique(),slug:text("slug").notNull().unique(),description:text("description"),createdAt:integer("created_at",{mode:"timestamp"}).notNull().$defaultFn(()=>new Date)}),$=sqliteTable("post_categories",{postId:integer("post_id").notNull().references(()=>N.id),categoryId:integer("category_id").notNull().references(()=>v.id)}),x=sqliteTable("debug_records",{id:integer("id").primaryKey({autoIncrement:!0}),title:text("title").notNull(),description:text("description"),status:text("status").default("active"),createdAt:integer("created_at",{mode:"timestamp"}).notNull().$defaultFn(()=>new Date),updatedAt:integer("updated_at",{mode:"timestamp"}).notNull().$defaultFn(()=>new Date)}),A=Object.freeze(Object.defineProperty({__proto__:null,categories:v,debugRecords:x,postCategories:$,posts:N,users:B},Symbol.toStringTag,{value:"Module"}));function getDb(e){if(e?.context?.cloudflare?.env?.DB)return drizzle(e.context.cloudflare.env.DB,{schema:A});throw new Error("Database connection not available")}export{desc as a,x as d,eq as e,getDb as g,B as u};
//# sourceMappingURL=db.mjs.map
